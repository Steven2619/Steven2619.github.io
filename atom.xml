<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiao yifei&#39;s blog</title>
  <subtitle>潇忆飞的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.songfei.site/"/>
  <updated>2017-07-30T14:51:47.510Z</updated>
  <id>http://www.songfei.site/</id>
  
  <author>
    <name>潇忆飞</name>
    <email>934835504@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript规范</title>
    <link href="http://www.songfei.site/2017/07/30/JavaScript%E8%A7%84%E8%8C%83/"/>
    <id>http://www.songfei.site/2017/07/30/JavaScript规范/</id>
    <published>2017-07-30T14:36:42.000Z</published>
    <updated>2017-07-30T14:51:47.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript规范"><a href="#JavaScript规范" class="headerlink" title="JavaScript规范"></a>JavaScript规范</h1><h2 id="内容列表"><a href="#内容列表" class="headerlink" title="内容列表"></a><a name="TOC">内容列表</a></h2><ol>
<li><a href="#types">类型</a></li>
<li><a href="#objects">对象</a></li>
<li><a href="#arrays">数组</a></li>
<li><a href="#strings">字符串</a></li>
<li><a href="#functions">函数</a></li>
<li><a href="#properties">属性</a></li>
<li><p><a href="#variables">变量</a></p>
<a id="more"></a>
</li>
<li><p><a href="#conditionals">条件表达式和等号</a></p>
</li>
<li><a href="#blocks">块</a></li>
<li><a href="#comments">注释</a></li>
<li><a href="#whitespace">空白</a></li>
<li><a href="#commas">逗号</a></li>
<li><a href="#semicolons">分号</a></li>
<li><a href="#type-coercion">类型转换</a></li>
<li><a href="#naming-conventions">命名约定</a></li>
<li><a href="#accessors">存取器</a></li>
<li><a href="#constructors">构造器</a></li>
<li><a href="#events">事件</a></li>
<li><a href="#modules">模块</a></li>
<li><a href="#jquery">jQuery</a></li>
<li><a href="#es5">ES5 兼容性</a></li>
</ol>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a name="types">类型</a></h2><ul>
<li><p><strong>原始值</strong>: 相当于传值</p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,</div><div class="line">    bar = foo;</div><div class="line"></div><div class="line">bar = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>复杂类型</strong>: 相当于传引用</p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><code>function</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>, <span class="number">2</span>],</div><div class="line">    bar = foo;</div><div class="line"></div><div class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a name="objects">对象</a></h2><ul>
<li><p>使用字面值创建对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> item = &#123;&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用保留字 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words" target="_blank" rel="external">reserved words</a> 作为键</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  class: 'superhero',</div><div class="line">  <span class="keyword">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  private: <span class="literal">true</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  klass: <span class="string">'superhero'</span>,</div><div class="line">  defaults: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  hidden: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a name="arrays">数组</a></h2><ul>
<li><p>使用字面值创建数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = [];</div></pre></td></tr></table></figure>
</li>
<li><p>如果你不知道数组的长度，使用push</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someStack = [];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">someStack.push(<span class="string">'abracadabra'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>当你需要拷贝数组时使用slice. <a href="http://jsperf.com/converting-arguments-to-an-array/7" target="_blank" rel="external">jsPerf</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> len = items.length,</div><div class="line">    itemsCopy = [],</div><div class="line">    i;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">itemsCopy = items.slice();</div></pre></td></tr></table></figure>
</li>
<li><p>使用slice将类数组的对象转成数组.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><a name="strings">字符串</a></h2><ul>
<li><p>对字符串使用单引号 <code>&#39;&#39;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</div></pre></td></tr></table></figure>
</li>
<li><p>超过80个字符的字符串应该使用字符串连接换行</p>
</li>
<li><p>注: 如果过度使用，长字符串连接可能会对性能有影响. <a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a> &amp; <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">Discussion</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that \</span></div><div class="line"><span class="string">was thrown because of Batman. \</span></div><div class="line"><span class="string">When you stop to think about \</span></div><div class="line"><span class="string">how Batman had anything to do \</span></div><div class="line"><span class="string">with this, you would get nowhere \</span></div><div class="line"><span class="string">fast.'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that '</span> +</div><div class="line">  <span class="string">'was thrown because of Batman.'</span> +</div><div class="line">  <span class="string">'When you stop to think about '</span> +</div><div class="line">  <span class="string">'how Batman had anything to do '</span> +</div><div class="line">  <span class="string">'with this, you would get nowhere '</span> +</div><div class="line">  <span class="string">'fast.'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>编程时使用join而不是字符串连接来构建字符串，特别是IE: <a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">jsPerf</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items,</div><div class="line">    messages,</div><div class="line">    length, i;</div><div class="line"></div><div class="line">messages = [&#123;</div><div class="line">    state: <span class="string">'success'</span>,</div><div class="line">    message: <span class="string">'This one worked.'</span></div><div class="line">&#125;,&#123;</div><div class="line">    state: <span class="string">'success'</span>,</div><div class="line">    message: <span class="string">'This one worked as well.'</span></div><div class="line">&#125;,&#123;</div><div class="line">    state: <span class="string">'error'</span>,</div><div class="line">    message: <span class="string">'This one did not work.'</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">length = messages.length;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    items[i] = messages[i].message;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;&lt;li&gt;'</span> + items.join(<span class="string">'&lt;/li&gt;&lt;li&gt;'</span>) + <span class="string">'&lt;/li&gt;&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a name="functions">函数</a></h2><ul>
<li><p>函数表达式:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匿名函数表达式</span></div><div class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 有名函数表达式</span></div><div class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 立即调用函数表达式</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
<li><p>绝对不要在一个非函数块里声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但是它们解析不同。</p>
</li>
<li><p><strong>注:</strong> ECMA-262定义把<code>块</code>定义为一组语句，函数声明不是一个语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">阅读ECMA-262对这个问题的说明</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>绝对不要把参数命名为 <code>arguments</code>, 这将会逾越函数作用域内传过来的 <code>arguments</code> 对象.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a name="properties">属性</a></h2><ul>
<li><p>当使用变量访问属性时使用中括号.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123;</div><div class="line">  jedi: <span class="literal">true</span>,</div><div class="line">  age: <span class="number">28</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> luke[prop];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isJedi = getProp(<span class="string">'jedi'</span>);</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a name="variables">变量</a></h2><ul>
<li><p>总是使用 <code>var</code> 来声明变量，如果不这么做将导致产生全局变量，我们要避免污染全局命名空间。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">superPower = <span class="keyword">new</span> SuperPower();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superPower = <span class="keyword">new</span> SuperPower();</div></pre></td></tr></table></figure>
</li>
<li><p>使用一个 <code>var</code> 以及新行声明多个变量，缩进4个空格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball = <span class="string">'z'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>最后再声明未赋值的变量，当你想引用之前已赋值变量的时候很有用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i, len, dragonball,</div><div class="line">    items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i, items = getItems(),</div><div class="line">    dragonball,</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    len;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball,</div><div class="line">    length,</div><div class="line">    i;</div></pre></td></tr></table></figure>
</li>
<li><p>在作用域顶部声明变量，避免变量声明和赋值引起的相关问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="条件表达式和等号"><a href="#条件表达式和等号" class="headerlink" title="条件表达式和等号"></a><a name="conditionals">条件表达式和等号</a></h2><ul>
<li>适当使用 <code>===</code> 和 <code>!==</code> 以及 <code>==</code> 和 <code>!=</code>.</li>
<li><p>条件表达式的强制类型转换遵循以下规则：</p>
<ul>
<li><strong>对象</strong> 被计算为 <strong>true</strong></li>
<li><strong>Undefined</strong> 被计算为 <strong>false</strong></li>
<li><strong>Null</strong> 被计算为 <strong>false</strong></li>
<li><strong>布尔值</strong> 被计算为 <strong>布尔的值</strong></li>
<li><strong>数字</strong> 如果是 <strong>+0, -0, or NaN</strong> 被计算为 <strong>false</strong> , 否则为 <strong>true</strong></li>
<li><strong>字符串</strong> 如果是空字符串 <code>&#39;&#39;</code> 则被计算为 <strong>false</strong>, 否则为 <strong>true</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</div><div class="line">  <span class="comment">// true</span></div><div class="line">  <span class="comment">// An array is an object, objects evaluate to true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用快捷方式.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (name) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (collection.length) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>阅读 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">Truth Equality and JavaScript</a> 了解更多</p>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="块"><a href="#块" class="headerlink" title="块"></a><a name="blocks">块</a></h2><ul>
<li><p>给所有多行的块使用大括号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test)</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a name="comments">注释</a></h2><ul>
<li><p>使用 <code>/** ... */</code> 进行多行注释，包括描述，指定类型以及参数值和返回值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// make() returns a new element</span></div><div class="line"><span class="comment">// based on the passed in tag name</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @param &lt;String&gt; tag</span></div><div class="line"><span class="comment">// @return &lt;Element&gt; element</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * make() returns a new element</span></div><div class="line"><span class="comment"> * based on the passed in tag name</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param &lt;String&gt; tag</span></div><div class="line"><span class="comment"> * @return &lt;Element&gt; element</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>//</code> 进行单行注释，在评论对象的上面进行单行注释，注释前放一个空行.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// is current tab</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果你有一个问题需要重新来看一下或如果你建议一个需要被实现的解决方法的话需要在你的注释前面加上 <code>FIXME</code> 或 <code>TODO</code> 帮助其他人迅速理解</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></div><div class="line">  total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></div><div class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a><a name="whitespace">空白</a></h2><ul>
<li><p>将tab设为4个空格</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙∙∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>大括号前放一个空格</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dog.set(<span class="string">'attr'</span>,&#123;</div><div class="line">  age: <span class="string">'1 year'</span>,</div><div class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dog.set(<span class="string">'attr'</span>, &#123;</div><div class="line">  age: <span class="string">'1 year'</span>,</div><div class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>在做长方法链时使用缩进.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">  .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end()</div><div class="line">  .find(<span class="string">'.open'</span>)</div><div class="line">    .updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).class(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</div><div class="line">    .data(data)</div><div class="line">  .enter().append(<span class="string">'svg:svg'</span>)</div><div class="line">    .class(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>)</div><div class="line">  .append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a><a name="commas">逗号</a></h2><ul>
<li><p>不要将逗号放前面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> once</div><div class="line">  , upon</div><div class="line">  , aTime;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> once,</div><div class="line">    upon,</div><div class="line">    aTime;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">    firstName: <span class="string">'Bob'</span></div><div class="line">  , <span class="attr">lastName</span>: <span class="string">'Parr'</span></div><div class="line">  , <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span></div><div class="line">  , <span class="attr">superPower</span>: <span class="string">'strength'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  firstName: <span class="string">'Bob'</span>,</div><div class="line">  lastName: <span class="string">'Parr'</span>,</div><div class="line">  heroName: <span class="string">'Mr. Incredible'</span>,</div><div class="line">  superPower: <span class="string">'strength'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>不要加多余的逗号，这可能会在IE下引起错误，同时如果多一个逗号某些ES3的实现会计算多数组的长度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  firstName: <span class="string">'Kevin'</span>,</div><div class="line">  lastName: <span class="string">'Flynn'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> heroes = [</div><div class="line">  <span class="string">'Batman'</span>,</div><div class="line">  <span class="string">'Superman'</span>,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  firstName: <span class="string">'Kevin'</span>,</div><div class="line">  lastName: <span class="string">'Flynn'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> heroes = [</div><div class="line">  <span class="string">'Batman'</span>,</div><div class="line">  <span class="string">'Superman'</span></div><div class="line">];</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a><a name="semicolons">分号</a></h2><ul>
<li><p>语句结束一定要加分号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></div><div class="line">  <span class="keyword">return</span> name</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><a name="type-coercion">类型转换</a></h2><ul>
<li>在语句的开始执行类型转换.</li>
<li><p>字符串:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>对数字使用 <code>parseInt</code> 并且总是带上类型转换的基数.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = +inputValue;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></div><div class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></div><div class="line"><span class="comment"> * Number made it a lot faster.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>布尔值:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = !!age;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a><a name="naming-conventions">命名约定</a></h2><ul>
<li><p>避免单个字符名，让你的变量名有描述意义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ..stuff..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当命名对象、函数和实例时使用驼峰命名规则</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> <span class="keyword">this</span>-is-my-object = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> user(&#123;</div><div class="line">  name: <span class="string">'Bob Parr'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">  name: <span class="string">'Bob Parr'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>当命名构造函数或类时使用驼峰式大写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</div><div class="line">  name: <span class="string">'nope'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</div><div class="line">  name: <span class="string">'yup'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>命名私有属性时前面加个下划线 <code>_</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>当保存对 <code>this</code> 的引用时使用 <code>_this</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(self);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(that);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(_this);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a><a name="accessors">存取器</a></h2><ul>
<li>属性的存取器函数不是必需的</li>
<li><p>如果你确实有存取器函数的话使用getVal() 和 setVal(‘hello’)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.getAge();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age(<span class="number">25</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.setAge(<span class="number">25</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>如果属性是布尔值，使用isVal() 或 hasVal()</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>可以创建get()和set()函数，但是要保持一致</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</div><div class="line">  <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>[key] = val;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a><a name="constructors">构造器</a></h2><ul>
<li><p>给对象原型分配方法，而不是用一个新的对象覆盖原型，覆盖原型会使继承出现问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype = &#123;</div><div class="line">  fight: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  block: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>方法可以返回 <code>this</code> 帮助方法可链。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line">luke.jump(); <span class="comment">// =&gt; true</span></div><div class="line">luke.setHeight(<span class="number">20</span>) <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line"></div><div class="line">luke.jump()</div><div class="line">  .setHeight(<span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>可以写一个自定义的toString()方法，但是确保它工作正常并且不会有副作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a name="events">事件</a></h2><ul>
<li><p>当给事件附加数据时，传入一个哈希而不是原始值，这可以让后面的贡献者加入更多数据到事件数据里而不用找出并更新那个事件的事件处理器</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, listingId</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>更好:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with data.listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a name="modules">模块</a></h2><ul>
<li>模块应该以 <code>!</code> 开始，这保证了如果一个有问题的模块忘记包含最后的分号在合并后不会出现错误</li>
<li>这个文件应该以驼峰命名，并在同名文件夹下，同时导出的时候名字一致</li>
<li>加入一个名为noConflict()的方法来设置导出的模块为之前的版本并返回它</li>
<li><p>总是在模块顶部声明 <code>&#39;use strict&#39;;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fancyInput/fancyInput.js</span></div><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> previousFancyInput = global.FancyInput;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.options = options || &#123;&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  FancyInput.noConflict = <span class="function"><span class="keyword">function</span> <span class="title">noConflict</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    global.FancyInput = previousFancyInput;</div><div class="line">    <span class="keyword">return</span> FancyInput;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  global.FancyInput = FancyInput;</div><div class="line">&#125;(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a><a name="jquery">jQuery</a></h2><ul>
<li><p>缓存jQuery查询</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line">  $sidebar.hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $sidebar.css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对DOM查询使用级联的 <code>$(&#39;.sidebar ul&#39;)</code> 或 <code>$(&#39;.sidebar ul&#39;)</code>，<a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="external">jsPerf</a></p>
</li>
<li><p>对有作用域的jQuery对象查询使用 <code>find</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'.sidebar'</span>, <span class="string">'ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good (slower)</span></div><div class="line">$sidebar.find(<span class="string">'ul'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good (faster)</span></div><div class="line">$($sidebar[<span class="number">0</span>]).find(<span class="string">'ul'</span>);</div></pre></td></tr></table></figure>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
<h2 id="ECMAScript-5兼容性"><a href="#ECMAScript-5兼容性" class="headerlink" title="ECMAScript 5兼容性"></a><a name="es5">ECMAScript 5兼容性</a></h2><ul>
<li><p>参考<a href="https://twitter.com/kangax/" target="_blank" rel="external">Kangax</a>的 ES5 <a href="http://kangax.github.com/es5-compat-table/" target="_blank" rel="external">compatibility table</a></p>
<p><strong><a href="#TOC">[⬆]</a></strong></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript规范&quot;&gt;&lt;a href=&quot;#JavaScript规范&quot; class=&quot;headerlink&quot; title=&quot;JavaScript规范&quot;&gt;&lt;/a&gt;JavaScript规范&lt;/h1&gt;&lt;h2 id=&quot;内容列表&quot;&gt;&lt;a href=&quot;#内容列表&quot; class=&quot;headerlink&quot; title=&quot;内容列表&quot;&gt;&lt;/a&gt;&lt;a name=&quot;TOC&quot;&gt;内容列表&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#types&quot;&gt;类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#objects&quot;&gt;对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arrays&quot;&gt;数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#strings&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#functions&quot;&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#properties&quot;&gt;属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#variables&quot;&gt;变量&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://www.songfei.site/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://www.songfei.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript+CSS  常用代码汇总</title>
    <link href="http://www.songfei.site/2017/07/30/JavaScript-CSS-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/"/>
    <id>http://www.songfei.site/2017/07/30/JavaScript-CSS-常用代码汇总/</id>
    <published>2017-07-30T13:03:11.000Z</published>
    <updated>2017-07-30T13:44:38.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-CSS-常用代码汇总"><a href="#JavaScript-CSS-常用代码汇总" class="headerlink" title="JavaScript+CSS 常用代码汇总"></a>JavaScript+CSS 常用代码汇总</h1><p> JavaScript和CSS3的常用代码总结。在平时工作和学习中，我们会遇到经常使用的片段，如果每次都去网上搜索的话，会浪费很多的时间，因此在这里把常用的代码汇总一下！</p>
<a id="more"></a>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#reset">CSS初始化样式reset.css</a></li>
<li><a href="#clearfix">去除浮动clearfix</a></li>
<li><a href="#js-cookie">js操作cookie</a></li>
<li><a href="#word-wrap">css强制换行/自动换行/强制不换行</a></li>
<li><a href="#table-border">table边界的样式</a></li>
<li><a href="#div-center">div上下左右居中</a></li>
<li><a href="#img-center">图片上下左右居中</a></li>
<li><a href="#js-str-reverse">js字符串翻转</a></li>
<li><a href="#ipad_adap">iPad页面适配框架</a></li>
<li><a href="#google_html5_js">google html5.js</a></li>
<li><a href="#js_random_num">js产生随机数字</a></li>
<li><a href="#table-td-align">table中的td对齐属性</a></li>
<li><a href="#radio-checkbox-select">radio-checkbox-select</a></li>
<li><a href="#requestAnimationFrame">requestAnimationFrame的兼容性处理</a></li>
<li><a href="#mouse-enter-leave">获取鼠标移动的方向</a></li>
<li><a href="#js-string-format">扩展String中的format</a></li>
<li><a href="#html_escape">html字段转换函数</a></li>
<li><a href="#js_random_string">js产生随机字符串</a></li>
<li><a href="#is_support_fixed">检测浏览器是否支持fixed</a></li>
<li><a href="#parse_url_param">解析url中的参数</a></li>
<li><a href="#lazyload_img">图片懒加载</a></li>
<li><a href="#animate_scrolltop">jQuery回到顶部</a></li>
<li><a href="#img_hover_bigger">图片hover放大</a></li>
<li><a href="#time_format">时间格式化</a></li>
</ol>
<h4 id="1-CSS初始化样式reset-css"><a href="#1-CSS初始化样式reset-css" class="headerlink" title="1. CSS初始化样式reset.css"></a><a id="reset" name="reset">1. CSS初始化样式reset.css</a></h4><p>不同的浏览器对各个标签默认的样式是不一样的，而且有时候我们也不想使用浏览器给出的默认样式，我们就可以用reset.css去掉其默认样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</div><div class="line"><span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125;</div><div class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</div><div class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125;</div><div class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125;</div><div class="line"><span class="selector-tag">small</span>&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125;</div><div class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125;</div><div class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125;</div><div class="line"><span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125;</div><div class="line"><span class="selector-tag">sub</span>&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125;</div><div class="line"><span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125;</div><div class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125;</div><div class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</div><div class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</div></pre></td></tr></table></figure>
<h4 id="2-去除浮动clearfix"><a href="#2-去除浮动clearfix" class="headerlink" title="2. 去除浮动clearfix"></a><a id="clearfix" name="clearfix">2. 去除浮动clearfix</a></h4><p>通常我们在有浮动元素的情况下，会在同级目录下再创建一个<code>&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code>；不过这样会增加很多无用的代码。此时我们用<code>:after</code>这个伪元素来解决浮动的问题，如果当前层级有浮动元素，那么在其父级添加上clearfix类即可。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"\00A0"</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">visibility</span>: hidden;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>&#125;</div></pre></td></tr></table></figure></p>
<h4 id="3-js操作cookie"><a href="#3-js操作cookie" class="headerlink" title="3. js操作cookie"></a><a id="js-cookie" name="js-cookie">3. js操作cookie</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  cookie = &#123;</div><div class="line">    <span class="comment">//写cookies</span></div><div class="line">    setCookie: <span class="function"><span class="keyword">function</span> (<span class="params">name, value</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> Days = <span class="number">365</span>;</div><div class="line">        <span class="keyword">var</span> exp =  <span class="keyword">new</span>  <span class="built_in">Date</span>();</div><div class="line">        exp.setTime(exp.getTime() + Days*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</div><div class="line">        <span class="built_in">document</span>.cookie = name +  <span class="string">"="</span> + <span class="built_in">escape</span> (value) +  <span class="string">";expires="</span>  + exp.toGMTString();</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">//读取cookies</span></div><div class="line">    getCookie: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> arr,reg= <span class="keyword">new</span>  <span class="built_in">RegExp</span>( <span class="string">"(^| )"</span> +name+ <span class="string">"=([^;]*)(;|$)"</span> );</div><div class="line">        <span class="keyword">if</span> (arr=<span class="built_in">document</span>.cookie.match(reg))</div><div class="line">            <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span> ;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">//删除cookies， name可以为字符串('username')或数组(['username', 'password', ...])</span></div><div class="line">    delCookie: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> delItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> exp =  <span class="keyword">new</span>  <span class="built_in">Date</span>();</div><div class="line">            exp.setTime(exp.getTime() - <span class="number">1</span>);</div><div class="line">            <span class="keyword">var</span> cval = cookie.getCookie(item);</div><div class="line">            <span class="keyword">if</span> (cval!== <span class="literal">null</span> ) <span class="built_in">document</span>.cookie= item +  <span class="string">"="</span> +cval+ <span class="string">";expires="</span> +exp.toGMTString();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> name === <span class="string">'string'</span> )&#123;</div><div class="line">            delItem( name );</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, len=name.length; i&lt;len; i++)&#123;</div><div class="line">                delItem( name[i] );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-css强制换行-自动换行-强制不换行"><a href="#4-css强制换行-自动换行-强制不换行" class="headerlink" title="4. css强制换行/自动换行/强制不换行"></a><a id="word-wrap" name="word-wrap">4. css强制换行/自动换行/强制不换行</a></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 强制不换行 */</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">white-space</span>:nowrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 自动换行 */</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">word-wrap</span>: break-word;</div><div class="line">  <span class="attribute">word-break</span>: normal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 强制英文单词断行 */</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">word-break</span>:break-all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####<a id="table-border" name="table-border">5. table边界的样式</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">border-collapse</span>: collapse; <span class="attribute">table-layout</span>: fixed; <span class="attribute">margin-top</span>: <span class="number">10px</span>;&#125;</div><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123; <span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>; <span class="attribute">background</span>: <span class="number">#fff</span>; <span class="attribute">font-size</span>: <span class="number">15px</span>; <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">8px</span>; <span class="attribute">color</span>: <span class="number">#000</span>; <span class="attribute">width</span>: <span class="number">160px</span>;&#125;</div></pre></td></tr></table></figure></p>
<h4 id="6-div上下左右居中"><a href="#6-div上下左右居中" class="headerlink" title="6. div上下左右居中"></a><a id="div-center" name="div-center">6. div上下左右居中</a></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">position</span>:absolute;</div><div class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</div><div class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-left</span>:-<span class="number">200px</span>;</div><div class="line">  <span class="attribute">margin-top</span>:-<span class="number">150px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-图片上下左右居中"><a href="#7-图片上下左右居中" class="headerlink" title="7. 图片上下左右居中"></a><a id="img-center" name="img-center">7. 图片上下左右居中</a></h4><p>一种常用的方式是把外层的div设置为table-cell；然后让内部的元素上下左右居中。当然也还有一种方式，就是把img当做div，参考6中的代码进行设置。<br>CSS代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.content</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">display</span>:table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./4.jpg"</span> <span class="attr">alt</span>=<span class="string">"img"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="8-js字符串翻转"><a href="#8-js字符串翻转" class="headerlink" title="8. js字符串翻转"></a><a id="js-str-reverse" name="js-str-reverse">8. js字符串翻转</a></h4><p>js中没有直接对字符串进行反转的，需要我们先转换成数组，然后使用数组中的<code>reverse()</code>方法翻转，最后在把数组拼接回字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"abcdefg"</span>;</div><div class="line"><span class="keyword">var</span> revs = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line"><span class="built_in">console</span>.log(revs);</div></pre></td></tr></table></figure></p>
<h4 id="9-iPad页面适配框架"><a href="#9-iPad页面适配框架" class="headerlink" title="9. iPad页面适配框架"></a><a id="ipad_adap" name="ipad_adap">9. iPad页面适配框架</a></h4><p>这是一个适配iPad页面的大致框架，包括竖屏和横屏<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">iPad</span> 适配</div><div class="line"><span class="comment">/* ipad 竖屏 */</span></div><div class="line">@<span class="keyword">media</span> only screen</div><div class="line">and (min-device-width : <span class="number">768px</span>)</div><div class="line">and (max-device-width : <span class="number">1024px</span>)</div><div class="line">and (orientation : portrait) &#123;</div><div class="line">    <span class="selector-tag">body</span>&#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125;</div><div class="line">    <span class="comment">/* … */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* ipad 横屏 */</span></div><div class="line">@<span class="keyword">media</span> only screen</div><div class="line">and (min-device-width : <span class="number">768px</span>)</div><div class="line">and (max-device-width : <span class="number">1024px</span>)</div><div class="line">and (orientation : landscape) &#123;</div><div class="line">    <span class="selector-tag">body</span>&#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125;</div><div class="line">    <span class="comment">/* … */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="10-google-html5-js"><a href="#10-google-html5-js" class="headerlink" title="10. google html5.js"></a><a id="google_html5_js" name="google_html5_js">10. google html5.js</a></h4><p>这是Google提供的js框架，使IE8及以下的浏览器支持html5新标签<br><a href="http://html5shim.googlecode.com/svn/trunk/html5.js" target="_blank" rel="external">html5.js 链接</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> HTML5 Shiv v3.7.0 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed</span></div><div class="line"><span class="comment">*/</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">l,f</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> a=e.elements;<span class="keyword">return</span><span class="string">"string"</span>==<span class="keyword">typeof</span> a?a.split(<span class="string">" "</span>):a&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">var</span> b=n[a[o]];b||(b=&#123;&#125;,h++,a[o]=h,n[h]=b);<span class="keyword">return</span> b&#125;<span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">a,b,c</span>)</span>&#123;b||(b=f);<span class="keyword">if</span>(g)<span class="keyword">return</span> b.createElement(a);c||(c=i(b));b=c.cache[a]?c.cache[a].cloneNode():r.test(a)?(c.cache[a]=c.createElem(a)).cloneNode():c.createElem(a);<span class="keyword">return</span> b.canHaveChildren&amp;&amp;!s.test(a)?c.frag.appendChild(b):b&#125;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">if</span>(!b.cache)b.cache=&#123;&#125;,b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag();</div><div class="line">a.createElement=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span>!e.shivMethods?b.createElem(c):p(c,a,b)&#125;;a.createDocumentFragment=<span class="built_in">Function</span>(<span class="string">"h,f"</span>,<span class="string">"return function()&#123;var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;("</span>+m().join().replace(<span class="regexp">/[\w\-]+/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;b.createElem(a);b.frag.createElement(a);<span class="keyword">return</span><span class="string">'c("'</span>+a+<span class="string">'")'</span>&#125;)+<span class="string">");return n&#125;"</span>)(e,b.frag)&#125;<span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params">a</span>)</span>&#123;a||(a=f);<span class="keyword">var</span> b=i(a);<span class="keyword">if</span>(e.shivCSS&amp;&amp;!j&amp;&amp;!b.hasCSS)&#123;<span class="keyword">var</span> c,d=a;c=d.createElement(<span class="string">"p"</span>);d=d.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>]||d.documentElement;c.innerHTML=<span class="string">"x&lt;style&gt;article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section&#123;display:block&#125;mark&#123;background:#FF0;color:#000&#125;template&#123;display:none&#125;&lt;/style&gt;"</span>;</div><div class="line">c=d.insertBefore(c.lastChild,d.firstChild);b.hasCSS=!!c&#125;g||t(a,b);<span class="keyword">return</span> a&#125;<span class="keyword">var</span> k=l.html5||&#123;&#125;,s=<span class="regexp">/^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i</span>,r=<span class="regexp">/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i</span>,j,o=<span class="string">"_html5shiv"</span>,h=<span class="number">0</span>,n=&#123;&#125;,g;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">var</span> a=f.createElement(<span class="string">"a"</span>);a.innerHTML=<span class="string">"&lt;xyz&gt;&lt;/xyz&gt;"</span>;j=<span class="string">"hidden"</span><span class="keyword">in</span> a;<span class="keyword">var</span> b;<span class="keyword">if</span>(!(b=<span class="number">1</span>==a.childNodes.length))&#123;f.createElement(<span class="string">"a"</span>);<span class="keyword">var</span> c=f.createDocumentFragment();b=<span class="string">"undefined"</span>==<span class="keyword">typeof</span> c.cloneNode||</div><div class="line"><span class="string">"undefined"</span>==<span class="keyword">typeof</span> c.createDocumentFragment||<span class="string">"undefined"</span>==<span class="keyword">typeof</span> c.createElement&#125;g=b&#125;<span class="keyword">catch</span>(d)&#123;g=j=!<span class="number">0</span>&#125;&#125;)();<span class="keyword">var</span> e=&#123;<span class="attr">elements</span>:k.elements||<span class="string">"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video"</span>,<span class="attr">version</span>:<span class="string">"3.7.0"</span>,<span class="attr">shivCSS</span>:!<span class="number">1</span>!==k.shivCSS,<span class="attr">supportsUnknownElements</span>:g,<span class="attr">shivMethods</span>:!<span class="number">1</span>!==k.shivMethods,<span class="attr">type</span>:<span class="string">"default"</span>,<span class="attr">shivDocument</span>:q,<span class="attr">createElement</span>:p,<span class="attr">createDocumentFragment</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;a||(a=f);</div><div class="line"><span class="keyword">if</span>(g)<span class="keyword">return</span> a.createDocumentFragment();<span class="keyword">for</span>(<span class="keyword">var</span> b=b||i(a),c=b.frag.cloneNode(),d=<span class="number">0</span>,e=m(),h=e.length;d&lt;h;d++)c.createElement(e[d]);<span class="keyword">return</span> c&#125;&#125;;l.html5=e;q(f)&#125;)(<span class="keyword">this</span>,<span class="built_in">document</span>);</div></pre></td></tr></table></figure></p>
<h4 id="11-js产生随机数字"><a href="#11-js产生随机数字" class="headerlink" title="11. js产生随机数字"></a><a id="js_random_num" name="js_random_num">11. js产生随机数字</a></h4><p>这是利用js里的<code>Math.random()</code>产生的。若使用 *1000000 然后再强制转成整型也行；不过使用下面的方式可以更加简洁一些，直接截取随机数的最后6位进行返回：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRanNum</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="string">''</span>+<span class="built_in">Math</span>.random()).slice(<span class="number">-6</span>); <span class="comment">// Math.random().toString().slice(-6)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实，产生32位的字母和数字混合的字符串也比较简单，先给出一个含有包含所有字符和数字的混合字符串，然后使用<code>Math.random()</code>摘取每位上的字符进行拼接，最后能够得到一个32位的随机字符串；或者使用js的md5()进行加密也可以。可以参考本人收藏的md5加密代码【<a href="https://github.com/wenzi0github/js-encrypt/blob/master/md5.js" target="_blank" rel="external">md5加密</a>】</p>
<h4 id="12-table中td的对齐属性"><a href="#12-table中td的对齐属性" class="headerlink" title="12. table中td的对齐属性"></a><a id="table-td-align" name="table-td-align">12. table中td的对齐属性</a></h4><p>在table中有两个默认的属性：align(横向对齐属性)和valign(竖向对齐属性)。<br>align有三个值：left(左对齐，默认)，center(左右居中)，right(右对齐)；如想要文字居中，可以：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">'center'</span>&gt;</span>wenzi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>valign也三个值：top(上对齐)，middle(上下居中，默认)，bottom(下对齐)；如想要文字上居中，可以：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span>wenzi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然，为了实现结构与样式的分离，<strong>推荐</strong>使用CSS的属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">td</span>&#123;</div><div class="line">  <span class="attribute">align</span>: center; <span class="comment">/* 横向对齐：left, center, right */</span></div><div class="line">  <span class="attribute">vertical-align</span>: top; <span class="comment">/* 竖向对齐：top, middle, bottom */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="13-radio-checkbox-select"><a href="#13-radio-checkbox-select" class="headerlink" title="13. radio-checkbox-select"></a><a id="radio-checkbox-select" name="radio-checkbox-select">13. radio-checkbox-select</a></h4><p>jquery对radio, checkbox的input标签和select标签的操作</p>
<p>input[type=radio]的操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// boolean, 判断radio是否有被选中的元素</span></div><div class="line">$(<span class="string">'#myradio input[type=radio]'</span>).is(<span class="string">':checked'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置radio选中某个元素</span></div><div class="line">$(<span class="string">'#myradio input:eq(1)'</span>).prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置radio取消选中某个元素</span></div><div class="line">$(<span class="string">'#myradio input:eq(1)'</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 获取选中的radio的值</span></div><div class="line"><span class="keyword">var</span> val = $(<span class="string">'#myradio input[type=radio]:checked'</span>).val();</div></pre></td></tr></table></figure></p>
<p>input[type=checkbox]的操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断复选框是否选中</span></div><div class="line"><span class="keyword">var</span> bool = $(<span class="string">'#mycheckbox input[type=checkbox]'</span>).is(<span class="string">':checked'</span>) ;</div><div class="line"></div><div class="line"><span class="comment">// 全选，所有的checkbox都添加上checked属性</span></div><div class="line">$(<span class="string">'#checkall'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#like input[type=checkbox]'</span>).prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 反选，判断当前的checkbox是否被选中，若被选中则设置checked属性为false，否则设置checked属性为true</span></div><div class="line">$(<span class="string">'#reverse'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#like input[type=checkbox]'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).is(<span class="string">':checked'</span>))&#123;</div><div class="line">            $(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            $(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 取消选中，去掉所有checkbox的checked属性</span></div><div class="line">$(<span class="string">'#deleteall'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#like input[type=checkbox]'</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 获取选中的值</span></div><div class="line">$(<span class="string">'#getcheckval'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    $(<span class="string">'#mycheckbox input[type=checkbox]:checked'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        result.push( $(<span class="keyword">this</span>).val() );</div><div class="line">    &#125;)</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>select标签<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取select选中的value值，给select一个id，直接使用`val()`获取就行</span></div><div class="line">$(<span class="string">'#province'</span>).val()</div></pre></td></tr></table></figure></p>
<h4 id="14-requestAnimationFrame的兼容性处理"><a href="#14-requestAnimationFrame的兼容性处理" class="headerlink" title="14. requestAnimationFrame的兼容性处理"></a><a id="radio-checkbox-select" name="requestAnimationFrame">14. requestAnimationFrame的兼容性处理</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// http://paulirish.com/2011/requestanimationframe-for-smart-animating/</span></div><div class="line"><span class="comment">// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating</span></div><div class="line"><span class="comment">// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel</span></div><div class="line"><span class="comment">// MIT license</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> vendors = [<span class="string">'ms'</span>, <span class="string">'moz'</span>, <span class="string">'webkit'</span>, <span class="string">'o'</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'RequestAnimationFrame'</span>];</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelAnimationFrame'</span>] || <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelRequestAnimationFrame'</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">        <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16</span> - (currTime - lastTime));</div><div class="line">        <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            callback(currTime + timeToCall);</div><div class="line">        &#125;, timeToCall);</div><div class="line">        lastTime = currTime + timeToCall;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame) <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">        clearTimeout(id);</div><div class="line">    &#125;;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h4 id="15-获取鼠标移动的方向"><a href="#15-获取鼠标移动的方向" class="headerlink" title="15. 获取鼠标移动的方向"></a><a id="mouse-enter-leave" name="mouse-enter-leave">15. 获取鼠标移动的方向</a></h4><p>我们一定遇见过鼠标从哪个地方进入到某div中，遮罩就从哪个方向出现，鼠标从哪个地方离开这个div，遮罩就从哪个方向消失。整个动画实现的基础就是获取鼠标移动的方向。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 获取元素移动的方向</span></div><div class="line"><span class="comment"> * @param  $element  元素的jQuery对象</span></div><div class="line"><span class="comment"> * @param  event     事件对象</span></div><div class="line"><span class="comment"> * @return direction 返回一个数字：0:上，1:右，2:下，3:左</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDirection</span>(<span class="params">$element, event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> w = $element.width(),</div><div class="line">        h = $element.height(),</div><div class="line">        x = (event.pageX - $element.offset().left - (w / <span class="number">2</span>)) * (w &gt; h ? (h / w) : <span class="number">1</span>),</div><div class="line">        y = (event.pageY - $element.offset().top - (h / <span class="number">2</span>)) * (h &gt; w ? (w / h) : <span class="number">1</span>),</div><div class="line">        direction = <span class="built_in">Math</span>.round((((<span class="built_in">Math</span>.atan2(y, x) * (<span class="number">180</span> / <span class="built_in">Math</span>.PI)) + <span class="number">180</span>) / <span class="number">90</span>) + <span class="number">3</span>) % <span class="number">4</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> direction;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="string">'#content'</span>).on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'enter: '</span>+ getDirection($(<span class="keyword">this</span>), event) );</div><div class="line">&#125;).on(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'leave: '</span>+getDirection($(<span class="keyword">this</span>), event) );</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="16-扩展String中的format"><a href="#16-扩展String中的format" class="headerlink" title="16. 扩展String中的format"></a><a id="js-string-format" name="js-string-format">16. 扩展String中的format</a></h4><ul>
<li>对String原型进行扩展: String.prototype.methodName=function…</li>
<li>正则表达式： /{(\d+)}/g ；取”{0}”这种格式的占位符，并对里面的数字放入子组</li>
<li>js 的 replace 方法有一种重载, string.format(regex , function(group0【匹配项】,group1【子组第一个】…){  //code…  }) ；对于每次匹配到的一个占位符，都从参数相应的位置取得替换项。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/\&#123;(\d+)\&#125;/g</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">g0, g1</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> args[+g1] || <span class="string">''</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="comment">//用法：</span></div><div class="line"><span class="string">"hello &#123;0&#125;,your age is &#123;1&#125;,so &#123;0&#125;'s age is &#123;1&#125;"</span>.format(<span class="string">"tom"</span>,<span class="number">12</span>);</div><div class="line"><span class="comment">//"hello tom,your age is 12,so tom's age is 12"</span></div></pre></td></tr></table></figure>
<p>若不想在<code>String</code>的类型上进行拓展，也可以这样修改：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tool = &#123;</div><div class="line">    format : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">        <span class="keyword">var</span> reg = <span class="regexp">/\&#123;(\d+)\&#125;/g</span>;</div><div class="line">        <span class="keyword">return</span> str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">g0, g1</span>) </span>&#123;</div><div class="line">            g1++;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> args[+g1] || <span class="string">''</span>;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tool.format(<span class="string">"hello &#123;0&#125;,your age is &#123;1&#125;,so &#123;0&#125;'s age is &#123;1&#125;"</span>, <span class="string">"tom"</span>, <span class="number">12</span>);</div><div class="line"><span class="comment">// "hello tom,your age is 12,so tom's age is 12"</span></div></pre></td></tr></table></figure>
<h4 id="17-html字段转换函数"><a href="#17-html字段转换函数" class="headerlink" title="17. html字段转换函数"></a><a id="html_escape" name="html_escape">17. html字段转换函数</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHTML</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> replacements= &#123;<span class="string">"&lt;"</span>: <span class="string">"&amp;lt;"</span>, <span class="string">"&gt;"</span>: <span class="string">"&amp;gt;"</span>,<span class="string">"&amp;"</span>: <span class="string">"&amp;amp;"</span>, <span class="string">"\""</span>: <span class="string">"&amp;quot;"</span>&#125;;</div><div class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;&amp;"]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> replacements[character];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="18-js产生随机字符串"><a href="#18-js产生随机字符串" class="headerlink" title="18. js产生随机字符串"></a><a id="js_random_string" name="js_random_string">18. js产生随机字符串</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>很有意思，研究了一下，基本上toString后的参数规定可以是2-36之间的任意整数，不写的话默认是10（也就是十进制），此时返回的值就是那个随机数。</p>
<p>若是偶数，返回的数值字符串都是短的，若是奇数，则返回的将是一个很大长度的表示值。<br>若<10 则都是数字组成，="">10 才会包含字母。<br>所以如果想得到一长串的随机字符，则需使用一个 &gt; 10 且是奇数的参数，另外根据长度自行使用slice(2,n)截取！</10></p>
<h4 id="19-检测浏览器是否支持fixed"><a href="#19-检测浏览器是否支持fixed" class="headerlink" title="19. 检测浏览器是否支持fixed"></a><a id="is_support_fixed" name="is_support_fixed">19. 检测浏览器是否支持fixed</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSupportFixed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> userAgent = <span class="built_in">window</span>.navigator.userAgent,</div><div class="line">        ios = userAgent.match(<span class="regexp">/(iPad|iPhone|iPod)\s+OS\s([\d_\.]+)/</span>),</div><div class="line">        ios5below = ios &amp;&amp; ios[<span class="number">2</span>] &amp;&amp; (<span class="built_in">parseInt</span>(ios[<span class="number">2</span>].replace(<span class="regexp">/_/g</span>, <span class="string">'.'</span>), <span class="number">10</span>) &lt; <span class="number">5</span>),</div><div class="line">        operaMini = <span class="regexp">/Opera Mini/i</span>.test(userAgent),</div><div class="line">        body = <span class="built_in">document</span>.body,</div><div class="line">        div, isFixed;</div><div class="line"></div><div class="line">    div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    div.style.cssText = <span class="string">'display:none;position:fixed;z-index:100;'</span>;</div><div class="line">    body.appendChild(div);</div><div class="line">    isFixed = <span class="built_in">window</span>.getComputedStyle(div).position != <span class="string">'fixed'</span>;</div><div class="line">    body.removeChild(div);</div><div class="line">    div = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> !!(isFixed || ios5below || operaMini);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="20-解析url中的参数"><a href="#20-解析url中的参数" class="headerlink" title="20. 解析url中的参数"></a><a id="parse_url_param" name="parse_url_param">20. 解析url中的参数</a></h4><p>用于解析当前URL中带的参数，如 <a href="http://www.xiabingbao.com/javascript/2015/01/30/geturl-param/?a=1&amp;b=wenzi" target="_blank" rel="external">http://www.xiabingbao.com/javascript/2015/01/30/geturl-param/?a=1&amp;b=wenzi</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseUrl</span>(<span class="params">search, name</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</div><div class="line">    <span class="keyword">var</span> r = url.substr(<span class="number">1</span>).match(reg);</div><div class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line">parseUrl(<span class="built_in">window</span>.location.search, <span class="string">'id'</span>);</div></pre></td></tr></table></figure>
<h4 id="21-图片懒加载"><a href="#21-图片懒加载" class="headerlink" title="21. 图片懒加载"></a><a id="lazyload_img" name="lazyload_img">21. 图片懒加载</a></h4><p>对需要懒加载的图片，把真实的图片地址放到<code>_src</code>的属性中，不要写<code>src</code>属性，因为src的值为空时也会请求，或者为src设置一个1x1的占位图片。</p>
<p>把整个页面里的图片划分区域，每个区域按顺序设置图片的<code>name</code>属性，值为<code>page_cnt_{num}</code>，num从1开始依次递增不能有间断：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">_src</span>=<span class="string">"http://inews.gtimg.com/newsapp_ls/0/301518240_150120/0"</span> <span class="attr">name</span>=<span class="string">"page_cnt_1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">_src</span>=<span class="string">"http://inews.gtimg.com/newsapp_ls/0/301518240_150120/0"</span> <span class="attr">name</span>=<span class="string">"page_cnt_1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">_src</span>=<span class="string">"http://inews.gtimg.com/newsapp_ls/0/301518240_150120/0"</span> <span class="attr">name</span>=<span class="string">"page_cnt_1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">_src</span>=<span class="string">"http://inews.gtimg.com/newsapp_ls/0/301518240_150120/0"</span> <span class="attr">name</span>=<span class="string">"page_cnt_2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">_src</span>=<span class="string">"http://inews.gtimg.com/newsapp_ls/0/301518240_150120/0"</span> <span class="attr">name</span>=<span class="string">"page_cnt_2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">_src</span>=<span class="string">"http://inews.gtimg.com/newsapp_ls/0/301518240_150120/0"</span> <span class="attr">name</span>=<span class="string">"page_cnt_2"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当滚动条滚动到当前区域时，则把area1区域里name的值是<strong>page_cnt_1</strong>的图片都加载完成，而area2则在滚动条再次滚动到相应的距离时才加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> a=<span class="keyword">this</span>;a.pageSize=<span class="number">1E3</span>;a.pageQuotiety=<span class="number">.5</span>;a.imgName=<span class="string">"page_cnt_"</span>;a.imgs=[];<span class="keyword">var</span> e,g;e=<span class="built_in">window</span>.navigator.userAgent.toLowerCase();g=<span class="regexp">/msie/</span>.test(e);<span class="regexp">/gecko/</span>.test(e);<span class="regexp">/opera/</span>.test(e);<span class="regexp">/safari/</span>.test(e);<span class="keyword">var</span> f=<span class="function"><span class="keyword">function</span>(<span class="params">b,a</span>)</span>&#123;<span class="keyword">var</span> d=a?a:<span class="built_in">document</span>;<span class="keyword">return</span><span class="string">"object"</span>==<span class="keyword">typeof</span> b?b:d.getElementsByName(b)&#125;;a.getWindowSize=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> b=&#123;&#125;;<span class="keyword">if</span>(<span class="built_in">window</span>.self&amp;&amp;self.innerWidth)<span class="keyword">return</span> b.width=self.innerWidth,b.height=self.innerHeight,b;<span class="keyword">if</span>(<span class="built_in">document</span>.documentElement&amp;&amp;<span class="built_in">document</span>.documentElement.clientHeight)<span class="keyword">return</span> b.width=</div><div class="line"><span class="built_in">document</span>.documentElement.clientWidth,b.height=<span class="built_in">document</span>.documentElement.clientHeight,b;b.width=<span class="built_in">document</span>.body.clientWidth;b.height=<span class="built_in">document</span>.body.clientHeight;<span class="keyword">return</span> b&#125;;a.getObjPosition=<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;a.x=b.offsetLeft;<span class="keyword">for</span>(a.y=b.offsetTop;b=b.offsetParent;)a.x+=b.offsetLeft,a.y+=b.offsetTop;<span class="keyword">return</span> a&#125;;a._getPageScroll=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> a;<span class="string">"undefined"</span>!=<span class="keyword">typeof</span> <span class="built_in">window</span>.pageYOffset?a=<span class="built_in">window</span>.pageYOffset:<span class="built_in">document</span>.documentElement&amp;&amp;<span class="built_in">document</span>.documentElement.scrollTop?a=<span class="built_in">document</span>.documentElement.scrollTop:<span class="built_in">document</span>.body&amp;&amp;</div><div class="line">(a=<span class="built_in">document</span>.body.scrollTop);<span class="keyword">return</span> a&#125;;a._loadImages=<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">if</span>(a)&#123;<span class="keyword">var</span> c=a;<span class="string">"string"</span>==<span class="keyword">typeof</span> a&amp;&amp;(c=f(a));<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;c.length;a++)&#123;<span class="keyword">var</span> d=c[a];<span class="string">"object"</span>==<span class="keyword">typeof</span> d&amp;&amp;d.getAttribute(<span class="string">"_src"</span>)&amp;&amp;(d.setAttribute(<span class="string">"src"</span>,d.getAttribute(<span class="string">"_src"</span>)),d.removeAttribute(<span class="string">"_src"</span>,<span class="number">0</span>))&#125;<span class="keyword">delete</span> c&#125;&#125;;a._loadAllImgs=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> b=<span class="number">0</span>;a.imgs[b];)a._loadImages(a.imgs[b][<span class="number">0</span>]),b++&#125;;a.getImgPosition=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> b=<span class="number">1</span>,c=f(a.imgName+b);c&amp;&amp;<span class="number">0</span>&lt;c.length;)&#123;<span class="keyword">var</span> c=f(<span class="string">"page_cnt_"</span>+b),d=a.getImgLoadPosition(c[<span class="number">0</span>]);a.imgs.push([c,c[<span class="number">0</span>],d]);</div><div class="line">b++;c=f(a.imgName+b)&#125;&#125;;a.getImgLoadPosition=<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;<span class="keyword">var</span> c=&#123;<span class="attr">imgTop</span>:<span class="number">0</span>,<span class="attr">pageTop</span>:<span class="number">0</span>&#125;;b&amp;&amp;(a.getWindowSize(),c.imgTop=<span class="built_in">parseInt</span>(a.getObjPosition(b).y),c.pageTop=<span class="built_in">parseInt</span>(<span class="number">1E3</span>*(c.imgTop/<span class="number">1E3</span>-a.pageQuotiety)));<span class="keyword">return</span> c&#125;;a._addScrollEven=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;g?<span class="built_in">window</span>.attachEvent(<span class="string">"onscroll"</span>,a._scrollFn):<span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>,a._scrollFn,!<span class="number">1</span>)&#125;;a._removeScrollEven=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;g?<span class="built_in">window</span>.detachEvent(<span class="string">"onscroll"</span>,a._scrollFn):<span class="built_in">window</span>.removeEventListener(<span class="string">"scroll"</span>,a._scrollFn,!<span class="number">1</span>)&#125;;a._scrollFn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> b=a._getPageScroll(),</div><div class="line">c=a.getWindowSize().height;<span class="keyword">if</span>(<span class="number">0</span>==c)a._loadAllImgs();<span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">var</span> d=<span class="number">0</span>,e=<span class="number">0</span>;a.imgs[d];)b+c&lt;a.imgs[d][<span class="number">2</span>].pageTop||(a._loadImages(a.imgs[d][<span class="number">0</span>]),e++),d++,e&gt;=a.imgs.length&amp;&amp;a._removeScrollEven()&#125;;a.getImgPosition();a._addScrollEven();a._scrollFn()&#125;)();</div></pre></td></tr></table></figure>
<h4 id="22-jQuery回到顶部"><a href="#22-jQuery回到顶部" class="headerlink" title="22. jQuery回到顶部"></a><a id="animate_scrolltop" name="animate_scrolltop">22. jQuery回到顶部</a></h4><p>回到顶部有不少的方法，没有缓冲效果的话，先在顶部放置一个a标签，然后给回到顶部的链接一个<code>#</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 顶部标签</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">// 回到顶部的按钮</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果需要缓冲效果的话，可以使用jQuery中的<code>animate</code>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body,html'</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="number">0</span>&#125;, <span class="number">500</span>);</div></pre></td></tr></table></figure></p>
<h4 id="23-图片hover放大"><a href="#23-图片hover放大" class="headerlink" title="23. 图片hover放大"></a><a id="img_hover_bigger" name="img_hover_bigger">23. 图片hover放大</a></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">-webkit-transition</span>: transform .<span class="number">2s</span> ease-out;</div><div class="line">    <span class="attribute">-moz-transition</span>: transform .<span class="number">2s</span> ease-out;</div><div class="line">    <span class="attribute">-ms-transition</span>: transform .<span class="number">2s</span> ease-out;</div><div class="line">    <span class="attribute">-o-transition</span>: transform .<span class="number">2s</span> ease-out;</div><div class="line">    <span class="attribute">transition</span>: transform .<span class="number">2s</span> ease-out;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>  /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="24-时间格式化"><a href="#24-时间格式化" class="headerlink" title="24. 时间格式化"></a><a id="time_format" name="time_format">24. 时间格式化</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//格式化日期</span></div><div class="line"><span class="built_in">Date</span>.prototype.Format = <span class="function"><span class="keyword">function</span> (<span class="params">fmt</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="string">"y+"</span>: <span class="keyword">this</span>.getFullYear(),</div><div class="line">    <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>,                 <span class="comment">//月份</span></div><div class="line">    <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(),                    <span class="comment">//日</span></div><div class="line">    <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(),                   <span class="comment">//小时</span></div><div class="line">    <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(),                 <span class="comment">//分</span></div><div class="line">    <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(),                 <span class="comment">//秒</span></div><div class="line">    <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度</span></div><div class="line">    <span class="string">"S+"</span>: <span class="keyword">this</span>.getMilliseconds()             <span class="comment">//毫秒</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt))&#123;</div><div class="line">      <span class="keyword">if</span>(k == <span class="string">"y+"</span>)&#123;</div><div class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="string">""</span> + o[k]).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="string">"S+"</span>)&#123;</div><div class="line">        <span class="keyword">var</span> lens = <span class="built_in">RegExp</span>.$<span class="number">1.</span>length;</div><div class="line">        lens = lens==<span class="number">1</span>?<span class="number">3</span>:lens;</div><div class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length - <span class="number">1</span>,lens));</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> fmt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">console</span>.log(date.Format(<span class="string">"yyyy年MM月dd日 hh:mm:ss.S"</span>)); <span class="comment">//输出: 2016年04月01日 10:41:08.133</span></div><div class="line"><span class="built_in">console</span>.log(date.Format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>)); <span class="comment">//输出: 2016-04-01 10:41:08</span></div><div class="line"><span class="built_in">console</span>.log(date.Format(<span class="string">"yy-MM-dd hh:mm:ss"</span>)); <span class="comment">//输出: 16-04-01 10:41:08</span></div><div class="line"><span class="built_in">console</span>.log(date.Format(<span class="string">"yy-M-d hh:mm:ss"</span>)); <span class="comment">//输出: 16-4-1 10:41:08</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-CSS-常用代码汇总&quot;&gt;&lt;a href=&quot;#JavaScript-CSS-常用代码汇总&quot; class=&quot;headerlink&quot; title=&quot;JavaScript+CSS 常用代码汇总&quot;&gt;&lt;/a&gt;JavaScript+CSS 常用代码汇总&lt;/h1&gt;&lt;p&gt; JavaScript和CSS3的常用代码总结。在平时工作和学习中，我们会遇到经常使用的片段，如果每次都去网上搜索的话，会浪费很多的时间，因此在这里把常用的代码汇总一下！&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.songfei.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="JavaScript" scheme="http://www.songfei.site/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://www.songfei.site/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.songfei.site/2017/07/29/hello-world/"/>
    <id>http://www.songfei.site/2017/07/29/hello-world/</id>
    <published>2017-07-29T14:36:42.000Z</published>
    <updated>2017-08-30T06:07:17.535Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.songfei.site/tags/Hexo/"/>
    
  </entry>
  
</feed>
